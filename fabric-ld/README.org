#+SETUPFILE: ../common/setup.org
#+TITLE: thi.ng/fabric-ld

* Contents                                                         :toc_3_gh:
 - [[#about-the-project][About the project]]
     - [[#overview][Overview]]
     - [[#status][Status]]
     - [[#todo-example-usage][TODO Example usage]]
 - [[#namespaces][Namespaces]]
 - [[#tests][Tests]]
 - [[#module-definition][Module definition]]
     - [[#building--testing-this-project][Building & testing this project]]
     - [[#injected-properties][Injected properties]]
         - [[#component][component]]
         - [[#toolsnamespace][tools.namespace]]
         - [[#dependency-graph][dependency graph]]
         - [[#ring][ring]]
         - [[#compojure][compojure]]
         - [[#aleph][aleph]]
         - [[#manifold][manifold]]
     - [[#leiningen-project-file][Leiningen project file]]
     - [[#accessing-library-version-during-runtime][Accessing library version during runtime]]
         - [[#version-namespace][Version namespace]]
     - [[#license][License]]

* About the project

** Overview

This is the =fabric-ld= module providing Linked Data server
functionality in a component-wise manner.

** Status

VERY ALPHA quality, in active development.

** TODO Example usage

* Namespaces

- [[./src/core.org][thi.ng.fabric.ld.core]]

* Tests

- [[./test/core.org][thi.ng.fabric.ld.test.core]]

* Module definition

** Building & testing this project

Please see the [[../README.org][parent project]] for further information.

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :noweb-ref project-name
thi.ng/fabric-ld
#+END_SRC

*** component
#+NAME: dep-component
#+BEGIN_SRC clojure
[com.stuartsierra/component "0.2.3"]
#+END_SRC

*** tools.namespace
#+NAME: dep-tools-ns
#+BEGIN_SRC clojure
[org.clojure/tools.namespace "0.2.10"]
#+END_SRC

*** dependency graph
#+NAME: dep-depgraph
#+BEGIN_SRC clojure
[com.stuartsierra/dependency "0.1.1"]
#+END_SRC

*** ring
#+NAME: dep-ring
#+BEGIN_SRC clojure
[ring/ring-defaults "0.1.5"]
[ring/ring-devel "1.4.0"]
#+END_SRC

#+NAME: dep-ring-dev
#+BEGIN_SRC clojure
[javax.servlet/servlet-api "2.5"]
[ring/ring-mock "0.2.0"]
#+END_SRC

*** compojure
#+NAME: dep-compojure
#+BEGIN_SRC clojure
[compojure "1.4.0"]
#+END_SRC

*** aleph
#+NAME: dep-aleph
#+BEGIN_SRC clojure
[aleph "0.4.0"]
#+END_SRC

*** manifold
#+NAME: dep-manifold
#+BEGIN_SRC clojure
[manifold "0.1.0"]
#+END_SRC

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version()>>"
    :description  "Signal/Collect inspired compute graph infrastructure - fact graph module"
    :url          "<<conf-project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "<<conf-project-url>>"}

    :min-lein-vesion "2.4.0"

    :dependencies [<<dep-clj>>
                   [thi.ng/fabric-core "<<conf-version()>>"]
                   [thi.ng/fabric-facts "<<conf-version()>>"]
                   <<dep-strf>>
                   <<dep-component>>
                   <<dep-tools-ns>>
                   <<dep-depgraph>>
                   <<dep-ring>>
                   <<dep-compojure>>
                   <<dep-aleph>>
                   <<dep-manifold>>]

    :profiles     {:dev {:dependencies [<<dep-criterium>>
                                        <<dep-ring-dev>>]
                         :global-vars  {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :aliases {"cleantest" ["do" "clean," "test"]}}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.fabric.ld.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.fabric.ld.version])
  
  (prn version)
  ; "<<conf-version()>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle babel/src/thi/ng/fabric/ld/version.cljc :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.fabric.ld.version)

  (def version "<<conf-version()>>")
#+END_SRC

** License

Copyright Â© 2015 Karsten Schmidt

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
