#+SETUPFILE: ../../common/setup.org

* Contents                                                         :toc_3_gh:
     - [[#graphviz-dot-export][Graphviz Dot export]]
     - [[#vertex-values][Vertex values]]
     - [[#complete-namespace-definition][Complete namespace definition]]

** Graphviz Dot export

#+BEGIN_SRC clojure :noweb-ref dot
  #?(:clj
     (defn vertices->dot
       ([path vertices flt]
        (vertices->dot
         path vertices flt
         #(format "%d[label=\"%d (%s)\"];\n" (f/id %) (f/id %) %2)))
       ([path vertices flt fmt]
        (->> vertices
             (filter flt)
             (sort-by f/id)
             (mapcat
              (fn [v]
                (if-let [outs @(.-outs ^thi.ng.fabric.core.Vertex v)]
                  (let [val @v
                        val (pr-str (if (instance? clojure.lang.IDeref val) @val val))]
                    (->> outs
                         (map
                          (fn [[k [_ opts]]]
                            (str (f/id v) "->" (f/id k) "[label=\"" (pr-str opts) "\"];\n")))
                         (cons (fmt v val)))))))
             (apply str)
             (format "digraph g {
    node[color=black,style=filled,fontname=Inconsolata,fontcolor=white,fontsize=9];
    edge[fontname=Inconsolata,fontsize=9];
    ranksep=1;
    overlap=scale;
    %s}")
             (spit path)))))
#+END_SRC

** Vertex values

#+BEGIN_SRC clojure :noweb-ref utils
  (defn sorted-vertex-values
    [vertices]
    (->> vertices
         (sort-by f/id)
         (map (juxt f/id deref))))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/fabric/core/utils.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.fabric.core.utils
    (:require
     [thi.ng.fabric.core :as f]))

  <<dot>>

  <<utils>>
#+END_SRC
