#+SETUPFILE: common/setup.org
#+TITLE: thi.ng/fabric

[[./assets/fabric-hot-1280x720-orange.jpg]]

Modular, Signal/Collect inspired compute graph infrastructure for Clojure & Clojurescript.

* Contents                                                         :toc_3_gh:
 - [[#about-the-project][About the project]]
     - [[#leiningen-coordinates][Leiningen coordinates]]
     - [[#todo-overview][TODO Overview]]
         - [[#motivation][Motivation]]
         - [[#use-cases][Use cases]]
         - [[#resources--related-work][Resources / related work]]
     - [[#status][Status]]
     - [[#example-usage][Example usage]]
         - [[#single-source-shortest-path][Single-source shortest path]]
         - [[#vertex-coloring-in-random-graphs][Vertex coloring in random graphs]]
         - [[#transitive-closure-type-inheritance-example][Transitive closure (type inheritance example)]]
         - [[#automatically-updating-fact-graph-queries-with-rule-based-inferencing][Automatically updating fact graph queries with rule based inferencing]]
 - [[#modules][Modules]]
 - [[#project-definition][Project definition]]
     - [[#injected-properties][Injected properties]]
     - [[#building-this-project][Building this project]]
         - [[#testing][Testing]]
         - [[#working-with-the-repl][Working with the REPL]]
     - [[#leiningen-project-file][Leiningen project file]]
     - [[#release-history][Release history]]
     - [[#contributors][Contributors]]
     - [[#license][License]]

* About the project

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/fabric "0.0.100"]
#+END_SRC

** TODO Overview

Compute graph infrastructure

*** Motivation
*** Use cases
*** Resources / related work

- http://www.cs.cmu.edu/~wcohen/postscript/iswc-2010.pdf
- http://www.semantic-web-journal.net/system/files/swj971.pdf
- http://signalcollect.com

** Status

ALPHA quality, in active development.

** Example usage

Currently, the included test cases acts as the best usage examples and
demonstrate most of the current implemented functionality:

*** Single-source shortest path

[[./assets/sssp.jpg]]

[[./fabric-core/test/sssp.org][source]]

*** Vertex coloring in random graphs

[[./assets/vcolor.jpg]]

[[./fabric-core/test/vertexcoloring.org][source]]

*** Transitive closure (type inheritance example)

[[./assets/transclosure.jpg]]

[[./fabric-core/test/transclosure.org][source]]

*** Automatically updating fact graph queries with rule based inferencing

[[./fabric-facts/test/core.org][source]]

* Modules

- [[./fabric-core/README.org][fabric-core]]
- [[./fabric-facts/README.org][fabric-facts]]
- [[./fabric-redis/README.org][fabric-redis]]

* Project definition

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :noweb-ref project-name
thi.ng/fabric
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code. Assuming both tools
are installed, the easiest way to generate a working project is via
command line (make sure =emacs= is on your path or else edit its path
in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi.ng/fabric.git
  cd fabric
  # tangle complete project
  ./tangle-all.sh src/*.org test/*.org
  # or single module
  ./tangle-module.sh core
  # or individual files
  ./tangle.sh fabric-core/src/core.org ...
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The generated =project.clj= files of each module all define an alias
to trigger a complete build & tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd <module-name>/babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Editing code blocks or files in Org-mode, then re-loading & testing
changes is quite trivial. Simply launch a REPL (via =lein= or Emacs)
as usual. Everytime you've made changes to an =.org= file, re-tangle
it from Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace
in the REPL via =(require 'thi.ng.fabric... :reload)= or similar.

** Leiningen project file                                          :noexport:

This project file only acts as meta-project definition adding
dependencies to all currently existing modules.

#+BEGIN_SRC clojure :tangle babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version()>>"
    :description  "Signal/Collect inspired compute graph infrastructure"
    :url          "<<conf-project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "<<conf-project-url>>"}

    :min-lein-vesion "2.4.0"

    :dependencies [[thi.ng/fabric-core "<<conf-version()>>"]
                   [thi.ng/fabric-facts "<<conf-version()>>"]]

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://thi.ng/fabric"]
                                [:timezone "0"]]])
#+END_SRC

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*        | *Tagged Github URL* |
|-----------+------------+--------------------+---------------------------+---------------------|
|     0.0.0 | pending    | 1st public release | =[thi.ng/fabric "0.0.0"]= |                     |

** Contributors

| *Name*          | *Role*                          | *Website*      |
|-----------------+---------------------------------+----------------|
| [[k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://thi.ng/]] |

** License

Copyright Â© 2015 Karsten Schmidt

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
