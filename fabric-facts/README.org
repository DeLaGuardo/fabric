#+SETUPFILE: ../common/setup.org
#+TITLE: thi.ng/fabric-facts

* Contents                                                         :toc_3_gh:
 - [[#about-the-project][About the project]]
     - [[#todo-overview][TODO Overview]]
     - [[#todo-status][TODO Status]]
     - [[#todo-example-usage][TODO Example usage]]
 - [[#namespaces][Namespaces]]
 - [[#tests][Tests]]
 - [[#module-definition][Module definition]]
     - [[#building--testing-this-project][Building & testing this project]]
     - [[#injected-properties][Injected properties]]
     - [[#leiningen-project-file][Leiningen project file]]
     - [[#clojurescript-html-harness][ClojureScript HTML harness]]
     - [[#accessing-library-version-during-runtime][Accessing library version during runtime]]
         - [[#version-namespace][Version namespace]]
     - [[#license][License]]

* About the project

** TODO Overview

Compute graph infrastructure

** TODO Status

ALPHA quality, in active development.

** TODO Example usage

#+BEGIN_SRC clojure
  (require 'thi.ng.fabric.core)

  ;; TODO some magic
#+END_SRC

* Namespaces

- [[./src/core.org][thi.ng.fabric.facts.core]]

* Tests

- [[./test/facts.org][thi.ng.fabric.test.facts]]

* Module definition

** Building & testing this project

Please see the [[../README.org][parent project]] for further information.

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :noweb-ref project-name
thi.ng/fabric-facts
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/fabric-facts-<<conf-version()>>.js
#+END_SRC

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version()>>"
    :description  "Signal/Collect inspired compute graph infrastructure - fact graph module"
    :url          "<<conf-project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "<<conf-project-url>>"}

    :min-lein-vesion "2.4.0"

    :dependencies [<<dep-clj>>
                   <<dep-cljs>>
                   [thi.ng/fabric-core "<<conf-version()>>"]]

    :profiles     {:dev {:dependencies [<<dep-criterium>>]
                         :plugins      [<<dep-cljsbuild>>
                                        <<dep-cljs-test>>]
                         :global-vars  {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}

    :cljsbuild    {:builds [{:source-paths ["src" "test"]
                             :id "dev"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}
                            {:source-paths ["src"]
                             :id "prod"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :advanced
                                        :pretty-print false}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://thi.ng/fabric"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <title><<project-name>> <<conf-version()>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.fabric.core.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.fabric.facts.version])
  
  (prn version)
  ; "<<conf-version()>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle babel/src/thi/ng/fabric/facts/version.cljc :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.fabric.facts.version)

  (def version "<<conf-version()>>")
#+END_SRC

** License

Copyright Â© 2015 Karsten Schmidt

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
