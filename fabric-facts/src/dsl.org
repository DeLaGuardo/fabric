* Namespace: thi.ng.fabric.facts.dsl

** TODOs

- add support for path queries
- add result aggregation
- EDN compatible filter expressions
- translate group-by and order expressions

** Examples

#+BEGIN_SRC clojure
  {:select    '[?a ?b ...]
   :transform ... ;; optional
   :q         [{:where '[[?res "dct:title" ?t] [?res "rdf:type" ?type]]}
               {:optional '[[?res "ea:schema" ?schema]]}]
   :filter    '[:or [:= ?res "ea:toxi"] [:= ?type "foaf:Person"]] ;; TODO
   :group-by  '[?type ?res] ;; TODO
   :order     '?type} ;; TODO
#+END_SRC

** Implementation

#+BEGIN_SRC clojure :noweb-ref dsl
  (defmulti compile-sub-query
    (fn [g parent q spec] (some #{:where :optional :union} (keys q))))

  (defmethod compile-sub-query :where
    [g parent q spec]
    (let [pat  (:where q)
          opts (select-keys q [:filter :limit])
          q    (if (< 1 (count pat))
                 (ff/add-query-join! g (:transform spec) pat opts)
                 (ff/add-param-query! g (:transform spec) (first pat) opts))]
      (if parent
        (ff/add-join! g parent q {})
        q)))

  (defmethod compile-sub-query :optional
    [g parent q spec]
    (let [pat  (:optional q)
          opts (select-keys q [:filter :limit])
          q    (if (< 1 (count pat))
                 (ff/add-query-join! g (:transform spec) pat opts)
                 (ff/add-param-query! g (:transform spec) (first pat) opts))]
      (if parent
        (ff/add-join! g ff/join-optional parent q {})
        q)))

  (defmethod compile-sub-query :union
    [g parent q spec]
    (let [pat  (:union q)
          opts (select-keys q [:filter :limit])
          q    (if (< 1 (count pat))
                 (ff/add-query-join! g (:transform spec) pat opts)
                 (ff/add-param-query! g (:transform spec) (first pat) opts))]
      (if parent
        (ff/add-query-union! g [parent q] {})
        q)))

  (defn compile-query
    [g {:keys [q] :as spec}]
    (let [spec (update spec :transform #(or % (ff/fact-transform g)))]
      (reduce
       (fn [acc sq] (compile-sub-query g acc sq spec))
       (compile-sub-query g nil (first q) spec)
       (rest q))))

  (defn compile-select-qvars
    [result g spec]
    (ff/add-query-result! g spec result))

  (defn add-query-from-spec!
    [g spec]
    (-> (compile-query g spec)
        (compile-select-qvars g spec)))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/fabric/facts/dsl.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.fabric.facts.dsl
    #?@(:clj
        [(:require
          [thi.ng.fabric.core :as f]
          [thi.ng.fabric.facts.core :as ff]
          [clojure.set :as set]
          [clojure.core.async :as a :refer [go go-loop chan close! <! >! alts! timeout]]
          [taoensso.timbre :refer [debug info warn]])]
        :cljs
        [(:require-macros
          [cljs.core.async.macros :refer [go go-loop]]
          [cljs-log.core :refer [debug info warn]])
         (:require
          [thi.ng.fabric.core :as f]
          [thi.ng.fabric.facts.core :as ff]
          [clojure.set :as set]
          [cljs.core.async :refer [chan close! <! >! alts! timeout]])]))

  <<helpers>>

  <<dsl>>
#+END_SRC
